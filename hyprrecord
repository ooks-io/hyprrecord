#!/usr/bin/env bash

## Hyprrecord: a simple recording script for hyprland
## Based on grimblast | Author:[misterio77](https://github.com/misterio77)

## Author: [ooks](https://github.com/ooks-io)

AUDIO_FLAG=
WAYBAR_FLAG=

while [ $# -gt 0 ]; do
  key="$1"
  case $key in
  -a | --audio)
    AUDIO_FLAG=true
    shift
    ;;
  -w | --waybar)
    WAYBAR_FLAG=true
    shift
    ;;
  *)
    break
    ;;
  esac
done

FORMAT=mp4

recording_directory() {
  test -f "${XDG_CONFIG_HOME:-$HOME/.config}/user-dirs.dirs" &&
    . "${XDG_CONFIG_HOME:-$HOME/.config}/user-dirs.dirs"
  echo "${XDG_RECORDINGS_DIR:-${XDG_VIDEOS_DIR:-$HOME}}"
}

recording_file() {
  if [ "$ACTION" = "copy" ]; then
    FILE=$(mktemp "/tmp/hyprecord-XXXXXX.$FORMAT")
  else
    FILE="$(recording_directory)/$(date +%Y-%m-%d_%H-%M-%S)_$(uuidgen | cut -d "-" -f5).$FORMAT"
  fi

  echo "$FILE"
}

get_audio() {
  SINK="$(pactl get-default-sink).monitor"
  AUDIO="--audio --audio-device $SINK"
  echo "$AUDIO"
}

notify() {
  notify-send -t 3000 -a hyprrecord "$@"
}

notify_succeed() {
  notify "$@"
}

notify_error() {
  TITLE=${2:-"RECORDING ERROR"}
  MESSAGE=${1:-"Error recording with wl-screenrec"}
  notify -u critical "$TITLE" "$MESSAGE"
}

error_exit() {
  notify_error "$1"
  echo "$1"
  exit 2
}

TYPE=${1:-video}
SUBJECT=${2:-screen}
ACTION=${3:-usage}

# Validate user input
if [[ ! "$TYPE" =~ ^(video|gif) ]]; then
  error_exit "Invalid TYPE: $TYPE (expected video or gif)"
elif [[ ! "$SUBJECT" =~ ^(screen|area|active) ]]; then
  error_exit "Invalid SUBJECT: $SUBJECT (expected screen, area or active)"
elif [[ ! "$ACTION" =~ ^(copy|save|copysave|usage|check) ]]; then
  error_exit "Invalid ACTION: $ACTION (expected copy, save, copysave, usage or check)"
fi

if [ "$ACTION" = "usage" ]; then
  echo "Usage: hyprrecord [OPTION]... [TYPE:video|gif] [SUBJECT:screen|active|area] [ACTION:save|copy|copysave]"
  echo ""
  echo "Options:"
  echo "  -a, --audio         Record audio with the video."
  echo "  -w, --waybar        Enable waybar integration (check man page for more information)."
  echo ""
  echo "Types:"
  echo "  video[default]      Record as a mp4."
  echo "  gif                 Record as a gif"
  echo ""
  echo "Subjects:"
  echo "  screen[default]     Record the entire screen."
  echo "  area                Record a selected area."
  echo "  active              Record the currently active window."
  echo ""
  echo "Actions:"
  echo "  usage[default]      Print help information"
  echo "  check               Test if required tools are available and exit."
  echo "  save                Save the recording to a file."
  echo "  copy                Copy the recording file path to the clipboard."
  echo "  copysave            Save and copy the recording file path to the clipboard."
  echo ""
  echo "Examples:"
  echo "  hyprrecord video screen save       Save a screen recording."
  echo "  hyprrecord -a video area copy      Copy an area recording with audio."
  echo "  hyprrecord video active copysave   Save and copy an active window recording."
  echo "  hyprrecord gif area copy           Copy an area as a gif"
  exit
fi

check() {
  COMMAND=$1
  if command -v "$COMMAND" >/dev/null 2>&1; then
    RESULT="OK"
  else
    RESULT="NOT FOUND"
  fi
  echo "   $COMMAND: $RESULT"
}

copy_file() {
  local file=$1
  URI="file://$file"
  echo -n $URI | wl-copy -t text/uri-list
}

convert_to_gif() {
  local input=$1
  local output="${input%.*}.gif"
  notify "Converting to gif..."
  ffmpeg -i "$input" -filter_complex "fps=10,scale=720:-1[s]; [s]split[a][b]; [a]palettegen[palette]; [b][palette]paletteuse" "$output"
  echo "$output"
}

send_waybar_signal() {
  if [ "$WAYBAR_FLAG" == "true" ]; then
    pkill -RTMIN+12 waybar
  fi
}

calculate_geometry() {
  local GEOM=""
  local WORKSPACE
  local WINDOWS
  local FOCUSED
  if [ "$SUBJECT" == "area" ]; then
    WORKSPACE="$(hyprctl monitors -j | jq -r 'map(.activeWorkspace.id)')"
    WINDOWS="$(hyprctl clients -j | jq -r --argjson workspaces "$WORKSPACE" 'map(select([.workspace.id] | inside($workspaces)))')"
    GEOM=$(echo "$WINDOWS" | jq -r '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"' | slurp $SLURP_ARGS)
  elif [ "$SUBJECT" == "active" ]; then
    FOCUSED=$(hyprctl activewindow -j)
    GEOM=$(echo "$FOCUSED" | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"')
  elif [ "$SUBJECT" = "screen" ]; then
    GEOM=""
  fi

  if [ -n "$GEOM" ]; then
    send_waybar_signal
  fi

  echo "$GEOM"
}

FILE=$(recording_file)

start_recording() {
  FILE=$1
  GEOM=$(calculate_geometry)
  if [ "$AUDIO_FLAG" == "true" ]; then
    AUDIO=$(get_audio)
  else
    AUDIO=""
  fi
  send_waybar_signal
  if [ -n "$OUTPUT" ]; then
    wl-screenrec $AUDIO -o "$OUTPUT" -f "$FILE" || error_exit "Failed to start recording"
  elif [ -z "$GEOM" ]; then
    wl-screenrec $AUDIO -f "$FILE" || error_exit "Failed to start recording"
  else
    wl-screenrec $AUDIO -g "$GEOM" -f "$FILE" || error_exit "Failed to start recording"
  fi
}

stop_recording() {
  if pgrep wl-screenrec >/dev/null; then
    kill -SIGINT $(pgrep -x wl-screenrec)

    # wait for wl-screenrec process to end before sending waybar signal
    while pgrep -x wl-screenrec >/dev/null; do
      sleep 0.1
    done

    send_waybar_signal
    exit 0
  fi
}

if [ "$ACTION" == "check" ]; then
  echo "Checking if dependencies are available".
  check hyprctl
  check slurp
  check wl-screenrec
  check pactl
  check wl-copy
  check jq
  check notify-send
  check ffmpeg
  exit 0
fi

stop_recording || error_exit "Failed to stop recording"

start_recording "$FILE" || error_exit "Failed to start recording"

if [ "$TYPE" == "gif" ]; then
  FILE=$(convert_to_gif "$FILE") || notify_error "Failed to convert to GIF"
fi

# actions to perform after recording
case "$ACTION" in
save)
  notify_succeed "Recording saved" "$FILE"
  ;;
copy)
  copy_file "$FILE" || error_exit "Failed to copy into clipboard"
  notify_succeed "Recording copied to clipboard"
  ;;
copysave)
  copy_file "$FILE" || error_exit "Failed to copy into clipboard"
  notify_succeed "Recording copied & saved" "$FILE"
  ;;
esac
